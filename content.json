{"meta":{"title":"YoginLin","subtitle":"一个不会编程的程序猿","description":"欢迎来到我的博客","author":"YoginLin","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2021-01-06T12:16:48.000Z","updated":"2021-01-06T12:17:29.173Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-01-06T12:17:51.000Z","updated":"2021-01-06T12:19:05.366Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-01-06T12:15:18.000Z","updated":"2021-01-06T12:16:12.778Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Markdown语法的一些笔记","slug":"Markdown学习总结（笔记）","date":"2021-01-05T09:53:56.000Z","updated":"2021-01-06T12:01:49.000Z","comments":true,"path":"2021/01/05/Markdown学习总结（笔记）/","link":"","permalink":"http://example.com/2021/01/05/Markdown%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/","excerpt":"","text":"Markdown 学习总结（笔记） 本笔记内容大部分源自于B站UP主 救救-99，我只是在此基础上加入了我的一些理解。 Markdown保姆级教程之基础篇（Typora使用教程） Markdown保姆级教程之画图篇（流程图、序列图、饼图、甘特图） 学习的目标 （1）知道什么是 Markdown （2）了解编写 Markdown 的工具 （3）学习 Markdown 的语法（重点） 一、什么是Markdown？知道什么是 markdown 其实并不重要，你只要知道它为什么流行就好了。 （1）使用方便。使用者能更专注于内容本身，而不是格式编排上。Markdown 可以让程序员很方便地写出非常漂亮的富文本格式 （2）用 markdown 写博客写完可以直接发布。Github 上的说明性文档一般也是用 markdown 写的，需要版本控制的时候 word 应该是不行的。 （3）写 markdown 是为了以纯文本 txt 格式就可以写，也可以读。显然 docx 另存为 txt 后就会丢失其中的排版格式, 但用 markdown 就不会。 二、有哪些可以编写 Markdown 的工具呢？编写 Markdown 的工具非常的多，甚至连 VSCode 只要加个插件就可以拿来写 Markdown 文档了（VSCode 永远滴神），但我推荐Typora，下载网站在下方。 https://www.typora.io/#windows 在使用 Typora 之前，有几个重要的设置要设置一下 1、点击 文件 → 偏好设置 → 图像，将“插入图片时…”设置成“复制图片到指定路径，路径设置成 ./${filename} 文件夹” ，并勾选下图中这三个选项的 √。这样，我们在 Markdown 中粘贴的图片就不会因为更换路径而丢失。 2、接下来点击 Markdown 选项，将严格模式的 √ 点掉，并将下面的下标、上标、高亮、图标都勾选上（如下图） 三、学习 Markdown 的语法（重点）1、标题一级标题使用一个#二级标题使用两个#三级标题使用三个#四级标题使用四个#五级标题使用五个#六级标题使用六个#最多支持六级标题# 2、文字删除线1这就是~~删除线~~ （使用~） 斜体1这就是 _斜体_ 的 _斜体_ （使用\\*或\\_） 加粗1这就是 **加粗** 斜体 + 加粗1这就是 **_斜体又加粗_** 下划线这就是下划线 ==高亮==（需勾选扩展语法）这就是==高亮== 下标2（需勾选扩展语法）这就是下标 水 H2O 上标^2^（需勾选扩展语法）这就是上标 面积 m^2^ 表情符号这就是表情符号：:smile: :smiley: :satisfied: 附带一个表情符号的网站，可以很方便的查找 https://www.webfx.com/tools/emoji-cheat-sheet/ 表格使用 | 来分割不同的单元格，使用 - 来分隔表头和其他行，但是在Typora中，使用Ctrl + T 生成表格更为简便 1234| name | age || -------- | ---- || zhangsan | 18 || lisi | 20 | name age zhangsan 18 lisi 20 为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 | 来标记单元格边界，在表头下方的分隔线标记中加入 :，可以调整表格中内容的对齐方式 1234| name | age || :------- | :--: || zhangsan | 18 || lisi | 20 | name price zhangsan 19 lisi 32 3、引用无序列表–符号 空格123* 可以使用 `*` 作为标记+ 也可以使用 `+`- 或者 `-` 可以使用 * 作为标记 也可以使用 + 或者 - 有序列表–数字 . 空格1231. 有序列表以数字和 `.` 开始；2. 数字的序列并不会影响生成的列表序列；3. 但仍然推荐按照自然顺序（1.2.3...）编写。 有序列表以数字和 . 开始； 数字的序列并不会影响生成的列表序列； 但仍然推荐按照自然顺序（1.2.3…）编写。 1可以使用：数字\\. 来取消显示为列表（用反斜杠进行转义） 4、代码代码块1​```语言名称 123public static void main(String[] args) &#123; System.out.println(&quot;hello World&quot;); &#125; 行内代码123也可以通过 ``，插入行内代码（` 是 `Tab` 键上边、数字 `1` 键左侧的那个按键）：例如 `Markdown` Markdown 转换规则代码块中的文本（包括 Markdown 语法）都会显示为原始内容 5、分隔线可以在一行中使用三个或更多的 *、- 或 _ 来添加分隔线（``）： 123***------___ 6、跳转外部跳转–超链接格式为 [link text](link)。 1[帮助文档](https://support.typora.io/Links/#faq) 帮助文档 内部跳转–本文件内跳（Typora支持）格式为 [link text](#要去的目的地--标题）。 1[我想跳转](#饼图（Pie）) Open Links in Typora You can use command+click (macOS), or ctrl+click (Linux/Windows) on links in Typora to jump to target headings, or open them in Typora, or open in related apps. 我想跳转 自动链接使用 &lt;&gt; 包括的 URL 或邮箱地址会被自动转换为超链接： 123&lt;https://www.baidu.com&gt;&lt;123@email.com&gt; https://www.baidu.com 123@email.com 7、图片1![自己起的图片名字](图片地址或者图片本地存储的路径) 网上的图片1![friedChicken](https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1580814517&amp;di=2630beac440e5dab0e44c7286a3b2b61&amp;src=http://imgsrc.baidu.com/forum/w=580/sign=12c730c4ff03738dde4a0c2a831ab073/9497794f9258d1091818e6d6d858ccbf6d814d1b.jpg) 本地图片123![friedChicken](friedChicken.jpg)在同一个文件夹里（用相对路径）或者直接拷贝 8、利用Markdown画图（需勾选扩展语法）markdown画图也是轻量级的，功能并不全。 Mermaid 是一个用于画流程图、状态图、时序图、甘特图的库，使用 JS 进行本地渲染，广泛集成于许多Markdown 编辑器中。Mermaid 作为一个使用 JS 渲染的库，生成的不是一个“图片”，而是一段 HTML 代码 （不同的编辑器渲染的可能不一样） 流程图(graph)概述12graph 方向描述 图表中的其他语句... 关键字graph表示一个流程图的开始，同时需要指定该图的方向。 其中“方向描述”为： 用词 含义 TB 从上到下 BT 从下到上 RL 从右到左 LR 从左到右 T = TOP，B = BOTTOM，L = LEFT，R = RIGHT，D = DOWN 就是说你想让这个图是从上到下（TB），还是从左到右（LR），最常用的布局方向是TB、LR。 12345graph TB; A--&gt;B B--&gt;C C--&gt;A 1234graph TB; A--&gt;B B--&gt;C C--&gt;A 1234graph LR; A--&gt;B B--&gt;C C--&gt;A 1234graph LR; A--&gt;B B--&gt;C C--&gt;A 流程图常用符号及含义节点形状 表述 说明 含义 id[文字] 矩形节点 表示过程，也就是整个流程中的一个环节 id(文字) 圆角矩形节点 表示开始和结束 id((文字)) 圆形节点 表示连接。为避免流程过长或有交叉，可将流程切开。成对 id{文字} 菱形节点 表示判断、决策 id&gt;文字] 右向旗帜状节点 单向箭头线段：表示流程进行方向 id即为节点的唯一标识，A~F 是当前节点名字，类似于变量名，画图时便于引用 括号内是节点中要显示的文字，默认节点的名字和显示的文字都为A 1234567graph TB A B(圆角矩形节点) C[矩形节点] D((圆形节点)) E&#123;菱形节点&#125; F&gt;右向旗帜状节点] 12345678graph TB A B(圆角矩形节点) C[矩形节点] D((圆形节点)) E&#123;菱形节点&#125; F&gt;右向旗帜状节点] 123456graph TB begin(出门)--&gt; buy[买炸鸡] buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125; IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家) IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack 123456graph TB begin(出门)--&gt; buy[买炸鸡] buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125; IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家) IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack 连线12345678910111213graph TB A1--&gt;B1 A2---B2 A3--text---B3 A4--text--&gt;B4 A5-.-B5 A6-.-&gt;B6 A7-.text.-B7 A8-.text.-&gt;B8 A9===B9 A10==&gt;B10 A11==text===B11 A12==text==&gt;B12 12345678910111213graph TB A1--&gt;B1 A2---B2 A3--text---B3 A4--text--&gt;B4 A5-.-B5 A6-.-&gt;B6 A7-.text.-B7 A8-.text.-&gt;B8 A9&#x3D;&#x3D;&#x3D;B9 A10&#x3D;&#x3D;&gt;B10 A11&#x3D;&#x3D;text&#x3D;&#x3D;&#x3D;B11 A12&#x3D;&#x3D;text&#x3D;&#x3D;&gt;B12 12graph TB A ---B 子图表使用以下语法添加子图表 123subgraph 子图表名称 子图表中的描述语句...end 1234567graph TB subgraph 买炸鸡前 begin(出门)--&gt; buy[出门买炸鸡] end buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125; IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家) IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack 1234567graph TB subgraph 买炸鸡前 begin(出门)--&gt; buy[出门买炸鸡] end buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125; IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家) IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack 序列图(sequence diagram)概述123sequenceDiagram [参与者1][消息线][参与者2]:消息体 ... sequenceDiagram 为每幅时序图的固定开头 123456sequenceDiagram Title: 买炸鸡 我-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？ 炸鸡店小哥--&gt;&gt;我: 没有，要现炸 12345sequenceDiagram Title: 买炸鸡 我-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？ 炸鸡店小哥--&gt;&gt;我: 没有，要现炸 参与者（participant）传统时序图概念中参与者有角色和类对象之分，但这里我们不做此区分，用参与者表示一切参与交互的事物，可以是人、类对象、系统等形式。中间竖直的线段从上至下表示时间的流逝。 12345sequenceDiagram participant 参与者 1 participant 参与者 2 ... participant 简称 as 参与者 3 #该语法可以在接下来的描述中使用简称来代替参与者 3 participant &lt;参与者名称&gt; 声明参与者，语句次序即为参与者横向排列次序。 消息线 类型 描述 -&gt; 无箭头的实线 –&gt; 无箭头的虚线 -&gt;&gt; 有箭头的实线（主动发出消息） –-&gt;&gt; 有箭头的虚线（响应） -x 末端为叉的实线（表示异步） –x 末端为叉的虚线（表示异步） 处理中-激活框从消息接收方的时间线上标记一小段时间，表示对消息进行处理的时间间隔。 在消息线末尾增加 + ，则消息接收者进入当前消息的“处理中”状态；在消息线末尾增加 - ，则消息接收者离开当前消息的“处理中”状态。 1234567sequenceDiagram participant me as 我 participant seller as 炸鸡店小哥 me -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; me: 没有，要现炸。 me -x +seller:给我炸！ seller --&gt;&gt; -me: 您的炸鸡好了！ 12345678sequenceDiagram participant 99 as 救救 participant seller as 炸鸡店小哥 99 -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; 99: 没有，要现炸。 99 -x +seller:给我炸！ seller --&gt;&gt; -99: 您的炸鸡好了！ 注解（note）语法如下 1Note 位置表述 参与者: 标注文字 其中位置表述可以为 表述 含义 right of 右侧 left of 左侧 over 在当中，可以横跨多个参与者 123456789101112sequenceDiagram participant me as 我 participant seller as 炸鸡店小哥 Note over me,seller : 热爱炸鸡 Note left of me : 女 Note right of seller : 男 me -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; me: 没有，要现炸。 me -x +seller : 给我炸！ seller --&gt;&gt; -me: 您的炸鸡好了！ 1234567891011sequenceDiagram participant me as 我 participant seller as 炸鸡店小哥 Note over me,seller : 热爱炸鸡 Note left of me : 女 Note right of seller : 男 me -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; me: 没有，要现炸。 me -x +seller : 给我炸！ seller --&gt;&gt; -me: 您的炸鸡好了！ 循环（loop）在条件满足时，重复发出消息序列。（相当于编程语言中的 while 语句。） 123456789101112sequenceDiagram participant me as 我 participant seller as 炸鸡店小哥 me -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; me: 没有，要现炸。 me -&gt;&gt; +seller:给我炸！ loop 三分钟一次 me -&gt;&gt; seller : 我的炸鸡好了吗？ seller --&gt;&gt; me : 正在炸 end seller --&gt;&gt; -me: 您的炸鸡好了！ 123456789101112sequenceDiagram participant me as 我 participant seller as 炸鸡店小哥 me -&gt;&gt; seller: 还有炸鸡吗？ seller --&gt;&gt; me: 没有，要现炸。 me -&gt;&gt; +seller:给我炸！ loop 三分钟一次 me -&gt;&gt; seller : 我的炸鸡好了吗？ seller --&gt;&gt; me : 正在炸 end seller --&gt;&gt; -me: 您的炸鸡好了！ 选择（alt）在多个条件中作出判断，每个条件将对应不同的消息序列。（相当于 if 及 else if 语句。） 123456789101112131415sequenceDiagram participant me as 我 participant seller as 炸鸡店小哥 me -&gt;&gt; seller : 现在就多少只炸好的炸鸡？ seller --&gt;&gt; me : 可卖的炸鸡数 alt 可卖的炸鸡数 &gt; 3 me -&gt;&gt; seller : 买三只！ else 1 &lt; 可卖的炸鸡数 &lt; 3 me -&gt;&gt; seller : 有多少买多少 else 可卖的炸鸡数 &lt; 1 me -&gt;&gt; seller : 那我明天再来 end seller --&gt;&gt; me : 欢迎下次光临 123456789101112131415sequenceDiagram participant me as 我 participant seller as 炸鸡店小哥 me -&gt;&gt; seller : 现在就多少只炸好的炸鸡？ seller --&gt;&gt; me : 可卖的炸鸡数 alt 可卖的炸鸡数 &gt; 3 me -&gt;&gt; seller : 买三只！ else 1 &lt; 可卖的炸鸡数 &lt; 3 me -&gt;&gt; seller : 有多少买多少 else 可卖的炸鸡数 &lt; 1 me -&gt;&gt; seller : 那我明天再来 end seller --&gt;&gt; me : 欢迎下次光临 可选（opt）在某条件满足时执行消息序列，否则不执行。相当于单个分支的 if 语句。 1234567sequenceDiagram participant me as 我 participant seller as 炸鸡店小哥 me -&gt;&gt; seller : 买炸鸡 opt 全都卖完了 seller --&gt;&gt; me : 下次再来 end 1234567sequenceDiagram participant me as 我 participant seller as 炸鸡店小哥 me -&gt;&gt; seller : 买炸鸡 opt 全都卖完了 seller --&gt;&gt; me : 下次再来 end 并行（Par）将消息序列分成多个片段，这些片段并行执行。 12345678910111213sequenceDiagram participant me as 我 participant seller as 炸鸡店小哥 me -&gt;&gt; seller : 一个炸鸡，一杯可乐！ par 并行执行 seller -&gt;&gt; seller : 装可乐 and seller -&gt;&gt; seller : 炸炸鸡 end seller --&gt;&gt; me : 您的炸鸡好了！ 12345678910111213sequenceDiagram participant me as 我 participant seller as 炸鸡店小哥 me -&gt;&gt; seller : 一个炸鸡，一杯可乐！ par 并行执行 seller -&gt;&gt; seller : 装可乐 and seller -&gt;&gt; seller : 炸炸鸡 end seller --&gt;&gt; me : 您的炸鸡好了！ 饼图（Pie）12345pie title Pie Chart &quot;Dogs&quot; : 386 &quot;Cats&quot; : 85 &quot;Rats&quot; : 150 123456pie title Pie Chart &quot;Dogs&quot; : 386 &quot;Cats&quot; : 85 &quot;Rats&quot; : 150 &quot;panda&quot; : 200 Typora支持mermaid的官方链接 甘特图（gantt）12345678910 title 标题dateFormat 日期格式section 部分名任务名:参数一, 参数二, 参数三, 参数四，参数五 //参数一：crit（是否重要，红框框） 或者 不填 //参数二：done（已完成）、active（正在进行） 或者 不填(表示为待完成状态) //参数三：取小名 或者 不填 //参数四：任务开始时间 //参数五：任务结束时间 官方教程 123456789101112131415161718192021222324252627gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h 123456789101112131415161718192021222324252627gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"}]}],"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"}]}